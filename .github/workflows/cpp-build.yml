name: C++ Backend Build and Test

on:
  push:
    branches: [ main, develop, copilot/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [g++-11, clang-14]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build ${{ matrix.compiler }}
        
    - name: Configure CMake
      run: |
        cd cpp
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_PYTHON_BINDINGS=OFF
    
    - name: Build
      run: |
        cd cpp
        cmake --build build --config ${{env.BUILD_TYPE}} -j $(nproc)
    
    - name: Run Tests
      run: |
        cd cpp/build
        ctest --output-on-failure --verbose
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agent-zero-cpp-linux-${{ matrix.compiler }}
        path: |
          cpp/build/libagent_zero_core.*
          cpp/build/examples/*
        retention-days: 7

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install cmake ninja
    
    - name: Configure CMake
      run: |
        cd cpp
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_PYTHON_BINDINGS=OFF
    
    - name: Build
      run: |
        cd cpp
        cmake --build build --config ${{env.BUILD_TYPE}} -j $(sysctl -n hw.ncpu)
    
    - name: Run Tests
      run: |
        cd cpp/build
        ctest --output-on-failure --verbose
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agent-zero-cpp-macos
        path: |
          cpp/build/libagent_zero_core.*
          cpp/build/examples/*
        retention-days: 7

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Configure CMake
      run: |
        cd cpp
        cmake -B build -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DBUILD_TESTS=ON `
          -DBUILD_EXAMPLES=ON `
          -DBUILD_PYTHON_BINDINGS=OFF
    
    - name: Build
      run: |
        cd cpp
        cmake --build build --config ${{env.BUILD_TYPE}} -j $env:NUMBER_OF_PROCESSORS
    
    - name: Run Tests
      run: |
        cd cpp/build
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure --verbose
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agent-zero-cpp-windows
        path: |
          cpp/build/${{env.BUILD_TYPE}}/agent_zero_core.*
          cpp/build/${{env.BUILD_TYPE}}/examples/*
        retention-days: 7

  build-python-bindings:
    name: Build Python Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pybind11 pytest numpy
    
    - name: Configure CMake
      run: |
        cd cpp
        cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_PYTHON_BINDINGS=ON -DBUILD_TESTS=OFF
    
    - name: Build Python Bindings
      run: |
        cd cpp
        cmake --build build --config ${{env.BUILD_TYPE}}
    
    - name: Upload Python Bindings
      uses: actions/upload-artifact@v4
      with:
        name: python-bindings-${{ matrix.os }}-py${{ matrix.python-version }}
        path: cpp/build/bindings/python/*.so
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-14 cppcheck
    
    - name: Check code formatting
      run: |
        find cpp/src cpp/include -name '*.cpp' -o -name '*.hpp' | \
          xargs clang-format-14 --dry-run --Werror
      continue-on-error: true
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --suppress=missingInclude \
          --error-exitcode=0 cpp/src cpp/include
      continue-on-error: true
